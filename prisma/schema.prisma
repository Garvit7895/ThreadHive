// -------------------------
// GENERATOR & DATASOURCE
// -------------------------
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// -------------------------
// ENUMS
// -------------------------
enum StatusType {
  PENDING
  RESOLVED
}

enum MediaType {
  IMAGE_JPEG
  IMAGE_PNG
  IMAGE_GIF
  IMAGE_WEBP
  VIDEO_MP4
  VIDEO_WEBM
  VIDEO_OGG
  AUDIO_MP3
  AUDIO_WAV
  AUDIO_OGG
  PDF
  TEXT_PLAIN
  TEXT_MARKDOWN
}

enum CommunityRole {
  OWNER
  ADMIN
  MODERATOR
  MEMBER
  GUEST
}

// -------------------------
// MODELS
// -------------------------
model User {
  id                BigInt        @id @default(autoincrement())
  username          String?       @unique
  email             String?       @unique
  passwordHash      String?
  emailVerified     DateTime?
  VerificationToken String?
  tokenExpiry       DateTime?
  passResetToken    String?
  passTokenExpiry   DateTime?
  bio               String?
  avatarUrl         String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  lastLoginAt       DateTime?

  // OAuth relations
  accounts          Account[]
  sessions          Session[]

  // App relations
  communities       Community[]           @relation("UserCommunities")
  memberships       CommunityMembership[]
  posts             Post[]
  roleAssignments   CommunityMembership[] @relation("RoleAssignedBy") // reverse relation
  comments          Comment[]
  votes             Vote[]
  media             Media[]
  notifications     Notification[]
  reports           Report[]              @relation("ReportsByUser")
}

model Account {
  id                BigInt   @id @default(autoincrement())
  userId            BigInt
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           BigInt   @id @default(autoincrement())
  sessionToken String   @unique
  userId       BigInt
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Community {
  id                BigInt        @id @default(autoincrement())
  name              String        @unique
  description       String?
  rules             String?
  avatarUrl         String?       // Community profile image
  bannerUrl         String?       // Community banner/cover
  createdBy         BigInt
  createdAt         DateTime      @default(now())

  creator           User          @relation("UserCommunities", fields: [createdBy], references: [id], onDelete: Cascade)
  memberships       CommunityMembership[]
  posts             Post[]
}

model Notification {
  id                BigInt        @id @default(autoincrement())
  userId            BigInt
  type              String
  relatedId         BigInt?
  readStatus        Boolean       @default(false)
  createdAt         DateTime      @default(now())

  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Report {
  id               BigInt         @id @default(autoincrement())
  reportedBy       BigInt
  targetType       String
  targetId         BigInt
  reason           String
  status           StatusType     @default(PENDING)
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt

  reporter         User           @relation("ReportsByUser", fields: [reportedBy], references: [id], onDelete: Cascade)
}

model Media {
  id               BigInt         @id @default(autoincrement())
  uploaderId       BigInt
  url              String
  type             MediaType
  createdAt        DateTime       @default(now())

  uploader         User           @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
}

model CommunityMembership {
  id             BigInt         @id @default(autoincrement())
  communityId    BigInt
  userId         BigInt
  role           CommunityRole  @default(MEMBER)
  joinedAt       DateTime       @default(now())

  // For tracking Role Assignment
  assignedBy     BigInt?        // User ID of the promoter
  promoter       User?          @relation("RoleAssignedBy", fields: [assignedBy], references: [id], onDelete: SetNull)

  // Relations
  community      Community      @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  


  @@unique([communityId, userId],  name: "communityId_userId") // Prevent duplicate membership
}

model Post {
  id             BigInt         @id @default(autoincrement())
  title          String
  body           String?
  mediaUrl       String?
  upVoteCount    Int            @default(0)
  downVoteCount  Int            @default(0)
  communityId    BigInt
  createdBy      BigInt
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  community      Community      @relation(fields: [communityId], references: [id], onDelete: Cascade)
  creator        User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  comments       Comment[]
  votes          Vote[]
}

model Comment {
  id             BigInt         @id @default(autoincrement())
  body           String
  postId         BigInt
  createdBy      BigInt
  parentId       BigInt?
  upVoteCount    Int            @default(0)
  downVoteCount  Int            @default(0)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt

  post           Post           @relation(fields: [postId], references: [id], onDelete: Cascade)
  creator        User           @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  parent         Comment?       @relation("CommentReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies        Comment[]      @relation("CommentReplies")
  votes          Vote[]
}

model Vote {
  id             BigInt         @id @default(autoincrement())
  userId         BigInt
  postId         BigInt?
  commentId      BigInt?
  createdAt      DateTime       @default(now())

  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  post           Post?          @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment        Comment?       @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, postId, commentId])
}
